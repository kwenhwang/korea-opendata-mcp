import { GoogleGenerativeAI } from '@google/generative-ai';
import { Observatory } from './types';
import { STATION_CODE_MAPPING } from './types';

export class GeminiStationFinder {
  private model: any;
  private genAI: GoogleGenerativeAI | null = null;

  constructor() {
    const apiKey = process.env.GEMINI_API_KEY;
    if (apiKey && apiKey !== 'your_gemini_api_key_here') {
      this.genAI = new GoogleGenerativeAI(apiKey);
      this.model = this.genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });
    }
  }

  async findStations(userQuery: string, dataType: string = 'waterlevel'): Promise<Array<{code: string, name: string}>> {
    // Gemini ÏÇ¨Ïö© Î∂àÍ∞ÄÏãú Îπà Î∞∞Ïó¥ Î∞òÌôò (Í∏∞Ï°¥ Î°úÏßÅÏù¥ Ï≤òÎ¶¨)
    if (!this.model) {
      console.warn('‚ö†Ô∏è Gemini ÏÇ¨Ïö© Î∂àÍ∞Ä, Í∏∞Ï°¥ Îß§Ïπ≠ Î°úÏßÅÏùÑ ÏÇ¨Ïö©ÌïòÏÑ∏Ïöî.');
      return [];
    }

    // Í¥ÄÏ∏°ÏÜå Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï§ÄÎπÑ
    const stationDB = Object.entries(STATION_CODE_MAPPING).map(([name, code]) => ({
      code,
      name
    }));
    
    const prompt = `
ÏÇ¨Ïö©Ïûê ÏßàÎ¨∏: "${userQuery}"
Îç∞Ïù¥ÌÑ∞ ÌÉÄÏûÖ: "${dataType}"

Îã§Ïùå Í¥ÄÏ∏°ÏÜå DBÏóêÏÑú Í∞ÄÏû• Ï†ÅÌï©Ìïú Í¥ÄÏ∏°ÏÜåÎ•º Ï∞æÏïÑÏ£ºÏÑ∏Ïöî:
${JSON.stringify(stationDB, null, 2)}

JSON ÏùëÎãµ (Ï†ïÌôïÌûà Ïù¥ ÌòïÏãù):
{
  "matches": [
    {
      "code": "Í¥ÄÏ∏°ÏÜåÏΩîÎìú",
      "name": "Í¥ÄÏ∏°ÏÜåÎ™Ö", 
      "confidence": 0-100
    }
  ]
}

Í∑úÏπô:
- confidence 80 Ïù¥ÏÉÅÎßå Î∞òÌôò
- ÏµúÎåÄ 3Í∞úÍπåÏßÄ
- Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî ÏßÄÏó≠ ‚Üí matches: []
- dataTypeÍ≥º ÏùºÏπòÌïòÎäî Í≤ÉÎßå (waterlevel: Îåê/ÎåÄÍµê, rainfall: Í∞ïÏö∞Í¥ÄÏ∏°ÏÜå)
- JSONÎßå Î∞òÌôò, Îã§Î•∏ ÏÑ§Î™Ö ÏóÜÏùå
`;

    try {
      const result = await this.model.generateContent(prompt);
      const response = JSON.parse(result.response.text());
      
      console.log('üéØ Gemini Îß§Ïπ≠ Í≤∞Í≥º:', response.matches);
      
      // confidence 80 Ïù¥ÏÉÅÏù∏ Í≤ÉÎßå Î∞òÌôò
      return response.matches
        .filter((match: any) => match.confidence >= 80)
        .map((match: any) => ({
          code: match.code,
          name: match.name
        }));
      
    } catch (error) {
      console.error('‚ùå Gemini Station Finding Error:', error);
      return []; // Ïã§Ìå®Ïãú Îπà Î∞∞Ïó¥ (Í∏∞Ï°¥ Î°úÏßÅÏúºÎ°ú Ìè¥Î∞±)
    }
  }
}
